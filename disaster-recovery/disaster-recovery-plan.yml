version: '3.8'

# SmellPin Disaster Recovery Infrastructure
# Multi-region deployment with automated failover and backup systems

services:
  # Primary Region Services
  primary-frontend:
    image: nginx:1.25-alpine
    container_name: smellpin-frontend-primary
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../security/nginx-security.conf:/etc/nginx/conf.d/default.conf:ro
      - ../security/ssl:/etc/nginx/ssl:ro
      - ./scripts:/scripts:ro
    networks:
      - primary-network
    environment:
      - REGION=us-east-1
      - ROLE=primary
      - FAILOVER_TARGET=secondary-frontend:443
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  primary-api:
    build:
      context: ../
      dockerfile: Dockerfile
    container_name: smellpin-api-primary
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL_PRIMARY}
      - REDIS_URL=${REDIS_URL_PRIMARY}
      - PORT=3000
      - REGION=us-east-1
      - ROLE=primary
      - FAILOVER_TARGET=secondary-api:3000
      - BACKUP_SCHEDULE=0 */6 * * *
    volumes:
      - ../src:/app/src:ro
      - ../api:/app/api:ro
      - ./scripts:/scripts:ro
      - backup-data:/app/backups
    networks:
      - primary-network
    depends_on:
      - primary-db-proxy
      - primary-redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # Primary Database Proxy (for connection pooling and failover)
  primary-db-proxy:
    image: haproxy:2.8-alpine
    container_name: smellpin-db-proxy-primary
    ports:
      - "5432:5432"
    volumes:
      - ./haproxy/haproxy-db.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./scripts:/scripts:ro
    networks:
      - primary-network
    environment:
      - PRIMARY_DB_HOST=${PRIMARY_DB_HOST}
      - SECONDARY_DB_HOST=${SECONDARY_DB_HOST}
      - REGION=us-east-1
    healthcheck:
      test: ["CMD", "/scripts/check-db-proxy.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Primary Redis with replication
  primary-redis:
    image: redis:7-alpine
    container_name: smellpin-redis-primary
    ports:
      - "6379:6379"
    volumes:
      - ./redis/redis-primary.conf:/usr/local/etc/redis/redis.conf:ro
      - redis-primary-data:/data
      - ./scripts:/scripts:ro
    networks:
      - primary-network
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=master
      - REPLICA_HOST=${SECONDARY_REDIS_HOST}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Secondary Region Services
  secondary-frontend:
    image: nginx:1.25-alpine
    container_name: smellpin-frontend-secondary
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ../security/nginx-security.conf:/etc/nginx/conf.d/default.conf:ro
      - ../security/ssl:/etc/nginx/ssl:ro
      - ./scripts:/scripts:ro
    networks:
      - secondary-network
    environment:
      - REGION=us-west-2
      - ROLE=secondary
      - PRIMARY_TARGET=primary-frontend:443
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  secondary-api:
    build:
      context: ../
      dockerfile: Dockerfile
    container_name: smellpin-api-secondary
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL_SECONDARY}
      - REDIS_URL=${REDIS_URL_SECONDARY}
      - PORT=3000
      - REGION=us-west-2
      - ROLE=secondary
      - PRIMARY_TARGET=primary-api:3000
    volumes:
      - ../src:/app/src:ro
      - ../api:/app/api:ro
      - ./scripts:/scripts:ro
      - backup-data:/app/backups
    networks:
      - secondary-network
    depends_on:
      - secondary-db-proxy
      - secondary-redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  secondary-db-proxy:
    image: haproxy:2.8-alpine
    container_name: smellpin-db-proxy-secondary
    ports:
      - "5433:5432"
    volumes:
      - ./haproxy/haproxy-db.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./scripts:/scripts:ro
    networks:
      - secondary-network
    environment:
      - PRIMARY_DB_HOST=${SECONDARY_DB_HOST}
      - SECONDARY_DB_HOST=${PRIMARY_DB_HOST}
      - REGION=us-west-2
    healthcheck:
      test: ["CMD", "/scripts/check-db-proxy.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  secondary-redis:
    image: redis:7-alpine
    container_name: smellpin-redis-secondary
    ports:
      - "6380:6379"
    volumes:
      - ./redis/redis-secondary.conf:/usr/local/etc/redis/redis.conf:ro
      - redis-secondary-data:/data
      - ./scripts:/scripts:ro
    networks:
      - secondary-network
    command: redis-server /usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=replica
      - MASTER_HOST=${PRIMARY_REDIS_HOST}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Failover Coordinator - Monitors and manages failover
  failover-coordinator:
    build:
      context: ./failover
      dockerfile: Dockerfile
    container_name: smellpin-failover-coordinator
    ports:
      - "9500:9500"
    environment:
      - NODE_ENV=production
      - COORDINATOR_PORT=9500
      - PRIMARY_API_URL=http://primary-api:3000
      - SECONDARY_API_URL=http://secondary-api:3000
      - PRIMARY_FRONTEND_URL=http://primary-frontend
      - SECONDARY_FRONTEND_URL=http://secondary-frontend
      - DNS_PROVIDER=${DNS_PROVIDER:-cloudflare}
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - FAILOVER_THRESHOLD=3
      - CHECK_INTERVAL=30000
      - RECOVERY_CHECK_INTERVAL=60000
    volumes:
      - ./scripts:/scripts:ro
      - failover-logs:/app/logs
    networks:
      - primary-network
      - secondary-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9500/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - primary-api
      - secondary-api

  # Backup Service - Automated backups with retention
  backup-service:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: smellpin-backup-service
    environment:
      - NODE_ENV=production
      - DATABASE_URL_PRIMARY=${DATABASE_URL_PRIMARY}
      - DATABASE_URL_SECONDARY=${DATABASE_URL_SECONDARY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BACKUP_BUCKET=${BACKUP_BUCKET:-smellpin-backups}
      - BACKUP_REGION=${AWS_REGION:-us-east-1}
      - BACKUP_SCHEDULE=0 */6 * * *  # Every 6 hours
      - RETENTION_DAYS=30
      - FULL_BACKUP_SCHEDULE=0 2 * * 0  # Weekly full backup
    volumes:
      - backup-data:/app/backups
      - ./scripts:/scripts:ro
    networks:
      - primary-network
      - secondary-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 300s
      timeout: 30s
      retries: 2
    restart: unless-stopped

  # Health Check Service - Comprehensive monitoring
  health-monitor:
    build:
      context: ./health-monitor
      dockerfile: Dockerfile
    container_name: smellpin-health-monitor
    ports:
      - "9600:9600"
    environment:
      - NODE_ENV=production
      - MONITOR_PORT=9600
      - CHECK_INTERVAL=15000
      - ALERT_THRESHOLD=3
      - RECOVERY_THRESHOLD=2
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - PAGERDUTY_INTEGRATION_KEY=${PAGERDUTY_INTEGRATION_KEY}
      - EMAIL_NOTIFICATIONS=${EMAIL_NOTIFICATIONS:-true}
    volumes:
      - ./config/endpoints.json:/app/config/endpoints.json:ro
      - ./scripts:/scripts:ro
      - health-logs:/app/logs
    networks:
      - primary-network
      - secondary-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Traffic Router - Intelligent load balancing
  traffic-router:
    image: haproxy:2.8-alpine
    container_name: smellpin-traffic-router
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # HAProxy stats
    volumes:
      - ./haproxy/haproxy-main.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./scripts:/scripts:ro
      - ../security/ssl:/etc/ssl:ro
    networks:
      - primary-network
      - secondary-network
    environment:
      - STATS_USER=${HAPROXY_STATS_USER:-admin}
      - STATS_PASS=${HAPROXY_STATS_PASS:-SmellPin2024!}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8404/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - primary-frontend
      - secondary-frontend

  # Log Aggregator - Centralized logging
  log-aggregator:
    image: grafana/loki:2.9.0
    container_name: smellpin-log-aggregator
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    networks:
      - primary-network
      - secondary-network
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Metrics Collector - Centralized metrics
  metrics-collector:
    image: prom/prometheus:v2.47.0
    container_name: smellpin-metrics-collector
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus-dr.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-dr-data:/prometheus
    networks:
      - primary-network
      - secondary-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  # Data volumes with backup capabilities
  backup-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/smellpin/disaster-recovery/backups

  failover-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/smellpin/disaster-recovery/logs/failover

  health-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/smellpin/disaster-recovery/logs/health

  redis-primary-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/smellpin/disaster-recovery/data/redis-primary

  redis-secondary-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/smellpin/disaster-recovery/data/redis-secondary

  loki-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/smellpin/disaster-recovery/data/loki

  prometheus-dr-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/smellpin/disaster-recovery/data/prometheus

networks:
  primary-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    labels:
      - "region=us-east-1"
      - "role=primary"

  secondary-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
    labels:
      - "region=us-west-2"
      - "role=secondary"