/**\n * SmellPin Testcontainers 设置 - Phase 1\n * 用真实的 Postgres + PostGIS + Redis 替代 SQLite\n * 解决 LBS/地理围栏/近邻查询的行为差异问题\n */\nimport { GenericContainer, StartedTestContainer, Wait } from 'testcontainers';\nimport { Client } from 'pg';\nimport Redis from 'ioredis';\n\ninterface TestEnvironment {\n  postgres: StartedTestContainer;\n  redis: StartedTestContainer;\n  pgClient: Client;\n  redisClient: Redis;\n  DATABASE_URL: string;\n  REDIS_URL: string;\n}\n\nclass TestContainersManager {\n  private static instance: TestContainersManager;\n  private environment: TestEnvironment | null = null;\n  private isSetup = false;\n\n  static getInstance(): TestContainersManager {\n    if (!TestContainersManager.instance) {\n      TestContainersManager.instance = new TestContainersManager();\n    }\n    return TestContainersManager.instance;\n  }\n\n  async setupTestEnvironment(): Promise<TestEnvironment> {\n    if (this.isSetup && this.environment) {\n      return this.environment;\n    }\n\n    console.log('🐳 启动 Testcontainers: Postgres + PostGIS + Redis...');\n    \n    try {\n      // 启动 PostgreSQL + PostGIS 容器\n      const postgresContainer = await new GenericContainer('postgis/postgis:16-3.4')\n        .withEnvironment({\n          POSTGRES_DB: 'smellpin_test',\n          POSTGRES_USER: 'test_user', \n          POSTGRES_PASSWORD: 'test_password',\n          POSTGRES_INITDB_ARGS: '--encoding=UTF-8 --lc-collate=C --lc-ctype=C'\n        })\n        .withExposedPorts(5432)\n        .withWaitStrategy(Wait.forLogMessage('database system is ready to accept connections', 2))\n        .withStartupTimeout(60000)\n        .start();\n\n      console.log(`✅ PostgreSQL + PostGIS 启动成功: ${postgresContainer.getMappedPort(5432)}`);\n\n      // 启动 Redis 容器\n      const redisContainer = await new GenericContainer('redis:7-alpine')\n        .withExposedPorts(6379)\n        .withWaitStrategy(Wait.forLogMessage('Ready to accept connections'))\n        .withStartupTimeout(30000)\n        .start();\n\n      console.log(`✅ Redis 启动成功: ${redisContainer.getMappedPort(6379)}`);\n\n      // 创建数据库连接\n      const DATABASE_URL = `postgres://test_user:test_password@localhost:${postgresContainer.getMappedPort(5432)}/smellpin_test`;\n      const REDIS_URL = `redis://localhost:${redisContainer.getMappedPort(6379)}`;\n\n      const pgClient = new Client({ connectionString: DATABASE_URL });\n      await pgClient.connect();\n\n      const redisClient = new Redis(REDIS_URL);\n      await redisClient.ping();\n\n      // 初始化 PostGIS 扩展\n      await this.initializePostGIS(pgClient);\n\n      // 运行数据库迁移\n      await this.runMigrations(DATABASE_URL);\n\n      this.environment = {\n        postgres: postgresContainer,\n        redis: redisContainer,\n        pgClient,\n        redisClient,\n        DATABASE_URL,\n        REDIS_URL\n      };\n\n      // 设置环境变量\n      process.env.DATABASE_URL = DATABASE_URL;\n      process.env.REDIS_URL = REDIS_URL;\n      process.env.NODE_ENV = 'test';\n\n      this.isSetup = true;\n      console.log('🎉 测试环境准备完成!');\n      \n      return this.environment;\n      \n    } catch (error) {\n      console.error('❌ Testcontainers 启动失败:', error);\n      throw error;\n    }\n  }\n\n  private async initializePostGIS(client: Client): Promise<void> {\n    console.log('🗺️ 初始化 PostGIS 扩展...');\n    \n    try {\n      // 启用 PostGIS 扩展\n      await client.query('CREATE EXTENSION IF NOT EXISTS postgis;');\n      await client.query('CREATE EXTENSION IF NOT EXISTS postgis_topology;');\n      await client.query('CREATE EXTENSION IF NOT EXISTS postgis_tiger_geocoder;');\n      await client.query('CREATE EXTENSION IF NOT EXISTS fuzzystrmatch;');\n      \n      // 验证 PostGIS 安装\n      const result = await client.query('SELECT PostGIS_Version();');\n      console.log(`✅ PostGIS 版本: ${result.rows[0].postgis_version}`);\n      \n    } catch (error) {\n      console.error('❌ PostGIS 初始化失败:', error);\n      throw error;\n    }\n  }\n\n  private async runMigrations(databaseUrl: string): Promise<void> {\n    console.log('📦 运行数据库迁移...');\n    \n    try {\n      const knex = require('knex')({\n        client: 'pg',\n        connection: databaseUrl,\n        migrations: {\n          directory: './migrations',\n          extension: 'js'\n        },\n        seeds: {\n          directory: './seeds'\n        }\n      });\n\n      await knex.migrate.latest();\n      console.log('✅ 数据库迁移完成');\n      \n      await knex.destroy();\n    } catch (error) {\n      console.error('❌ 数据库迁移失败:', error);\n      throw error;\n    }\n  }\n\n  async teardownTestEnvironment(): Promise<void> {\n    if (!this.environment) {\n      return;\n    }\n\n    console.log('🧹 清理测试环境...');\n\n    try {\n      // 关闭数据库连接\n      if (this.environment.pgClient) {\n        await this.environment.pgClient.end();\n      }\n\n      if (this.environment.redisClient) {\n        await this.environment.redisClient.disconnect();\n      }\n\n      // 停止容器\n      await this.environment.postgres.stop();\n      await this.environment.redis.stop();\n\n      this.environment = null;\n      this.isSetup = false;\n      \n      console.log('✅ 测试环境清理完成');\n    } catch (error) {\n      console.error('❌ 测试环境清理失败:', error);\n    }\n  }\n\n  getEnvironment(): TestEnvironment | null {\n    return this.environment;\n  }\n\n  // 数据隔离 - 每个测试使用独立的 schema\n  async createIsolatedSchema(testName: string): Promise<string> {\n    if (!this.environment?.pgClient) {\n      throw new Error('测试环境未初始化');\n    }\n\n    const schemaName = `test_${testName}_${Date.now()}`;\n    await this.environment.pgClient.query(`CREATE SCHEMA IF NOT EXISTS \"${schemaName}\";`);\n    await this.environment.pgClient.query(`SET search_path TO \"${schemaName}\", public;`);\n    \n    return schemaName;\n  }\n\n  async dropIsolatedSchema(schemaName: string): Promise<void> {\n    if (!this.environment?.pgClient) {\n      return;\n    }\n\n    try {\n      await this.environment.pgClient.query(`DROP SCHEMA IF EXISTS \"${schemaName}\" CASCADE;`);\n    } catch (error) {\n      console.warn(`清理 schema ${schemaName} 失败:`, error);\n    }\n  }\n\n  // Redis 清理 - 使用不同的 DB 索引隔离测试数据\n  async getIsolatedRedis(dbIndex: number = 0): Promise<Redis> {\n    if (!this.environment?.REDIS_URL) {\n      throw new Error('Redis 环境未初始化');\n    }\n\n    const redis = new Redis(`${this.environment.REDIS_URL}/${dbIndex}`);\n    await redis.flushdb(); // 清空当前数据库\n    return redis;\n  }\n}\n\n// 全局设置和清理函数\nexport async function setupTestContainers(): Promise<TestEnvironment> {\n  const manager = TestContainersManager.getInstance();\n  return await manager.setupTestEnvironment();\n}\n\nexport async function teardownTestContainers(): Promise<void> {\n  const manager = TestContainersManager.getInstance();\n  await manager.teardownTestEnvironment();\n}\n\nexport function getTestEnvironment(): TestEnvironment | null {\n  const manager = TestContainersManager.getInstance();\n  return manager.getEnvironment();\n}\n\n// Jest 全局设置函数\nexport default async function globalSetup() {\n  console.log('🚀 全局测试环境设置开始...');\n  await setupTestContainers();\n  console.log('✅ 全局测试环境设置完成');\n}\n\n// Jest 全局清理函数 \nexport async function globalTeardown() {\n  console.log('🧹 全局测试环境清理开始...');\n  await teardownTestContainers();\n  console.log('✅ 全局测试环境清理完成');\n}\n\n// 导出管理器实例供测试使用\nexport { TestContainersManager };