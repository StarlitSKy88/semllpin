<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="SmellPin Parallel Tests" tests="86" failures="33" errors="0" time="0.8">
  <testsuite name="AntiFraudService" errors="0" failures="7" skipped="0" timestamp="2025-09-03T01:21:32" time="0.23" tests="27">
    <testcase classname="AntiFraudService detectFraud should detect no fraud for normal behavior" name="AntiFraudService detectFraud should detect no fraud for normal behavior" time="0.003">
    </testcase>
    <testcase classname="AntiFraudService detectFraud should detect GPS spoofing with poor accuracy" name="AntiFraudService detectFraud should detect GPS spoofing with poor accuracy" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService detectFraud should detect abnormal movement speed" name="AntiFraudService detectFraud should detect abnormal movement speed" time="0.002">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: true
Received: false
    at Object.&lt;anonymous&gt; (/Users/xiaoyang/Downloads/臭味/tests/unit/services/antiFraudService.test.ts:176:10)</failure>
    </testcase>
    <testcase classname="AntiFraudService detectFraud should detect teleportation patterns" name="AntiFraudService detectFraud should detect teleportation patterns" time="0.003">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: true
Received: false
    at Object.&lt;anonymous&gt; (/Users/xiaoyang/Downloads/臭味/tests/unit/services/antiFraudService.test.ts:208:10)</failure>
    </testcase>
    <testcase classname="AntiFraudService detectFraud should detect high frequency location reporting" name="AntiFraudService detectFraud should detect high frequency location reporting" time="0.001">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: true
Received: false
    at Object.&lt;anonymous&gt; (/Users/xiaoyang/Downloads/臭味/tests/unit/services/antiFraudService.test.ts:240:10)</failure>
    </testcase>
    <testcase classname="AntiFraudService detectFraud should detect duplicate location reports" name="AntiFraudService detectFraud should detect duplicate location reports" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService detectFraud should detect suspicious reward patterns" name="AntiFraudService detectFraud should detect suspicious reward patterns" time="0.002">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: true
Received: false
    at Object.&lt;anonymous&gt; (/Users/xiaoyang/Downloads/臭味/tests/unit/services/antiFraudService.test.ts:293:10)</failure>
    </testcase>
    <testcase classname="AntiFraudService detectFraud should detect new account abuse" name="AntiFraudService detectFraud should detect new account abuse" time="0.001">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: true
Received: false
    at Object.&lt;anonymous&gt; (/Users/xiaoyang/Downloads/臭味/tests/unit/services/antiFraudService.test.ts:317:10)</failure>
    </testcase>
    <testcase classname="AntiFraudService detectFraud should detect device inconsistency" name="AntiFraudService detectFraud should detect device inconsistency" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService detectFraud should handle missing device info" name="AntiFraudService detectFraud should handle missing device info" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService detectFraud should handle database errors gracefully" name="AntiFraudService detectFraud should handle database errors gracefully" time="0.019">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: true
Received: false
    at Object.&lt;anonymous&gt; (/Users/xiaoyang/Downloads/臭味/tests/unit/services/antiFraudService.test.ts:389:35)</failure>
    </testcase>
    <testcase classname="AntiFraudService detectFraud should calculate fraud score correctly" name="AntiFraudService detectFraud should calculate fraud score correctly" time="0.003">
    </testcase>
    <testcase classname="AntiFraudService detectFraud should log anti-fraud results" name="AntiFraudService detectFraud should log anti-fraud results" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService getUserFraudHistory should retrieve user fraud history successfully" name="AntiFraudService getUserFraudHistory should retrieve user fraud history successfully" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService getUserFraudHistory should handle empty fraud history" name="AntiFraudService getUserFraudHistory should handle empty fraud history" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService getUserFraudHistory should handle database errors in fraud history" name="AntiFraudService getUserFraudHistory should handle database errors in fraud history" time="0.002">
    </testcase>
    <testcase classname="AntiFraudService shouldBlockUser should block user with high risk score" name="AntiFraudService shouldBlockUser should block user with high risk score" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService shouldBlockUser should block user with multiple recent violations" name="AntiFraudService shouldBlockUser should block user with multiple recent violations" time="0">
    </testcase>
    <testcase classname="AntiFraudService shouldBlockUser should block user with moderate risk and violations" name="AntiFraudService shouldBlockUser should block user with moderate risk and violations" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService shouldBlockUser should not block user with low risk and no violations" name="AntiFraudService shouldBlockUser should not block user with low risk and no violations" time="0">
    </testcase>
    <testcase classname="AntiFraudService shouldBlockUser should handle database errors conservatively" name="AntiFraudService shouldBlockUser should handle database errors conservatively" time="0.002">
    </testcase>
    <testcase classname="AntiFraudService distance calculation should calculate distance correctly" name="AntiFraudService distance calculation should calculate distance correctly" time="0">
    </testcase>
    <testcase classname="AntiFraudService distance calculation should handle same location" name="AntiFraudService distance calculation should handle same location" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService fraud score calculation should calculate weighted fraud score" name="AntiFraudService fraud score calculation should calculate weighted fraud score" time="0">
    </testcase>
    <testcase classname="AntiFraudService fraud score calculation should handle empty checks" name="AntiFraudService fraud score calculation should handle empty checks" time="0.001">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: 0
Received: NaN
    at Object.&lt;anonymous&gt; (/Users/xiaoyang/Downloads/臭味/tests/unit/services/antiFraudService.test.ts:623:26)
    at Promise.then.completed (/Users/xiaoyang/Downloads/臭味/node_modules/jest-circus/build/utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (/Users/xiaoyang/Downloads/臭味/node_modules/jest-circus/build/utils.js:231:10)
    at _callCircusTest (/Users/xiaoyang/Downloads/臭味/node_modules/jest-circus/build/run.js:316:40)
    at _runTest (/Users/xiaoyang/Downloads/臭味/node_modules/jest-circus/build/run.js:252:3)
    at _runTestsForDescribeBlock (/Users/xiaoyang/Downloads/臭味/node_modules/jest-circus/build/run.js:126:9)
    at _runTestsForDescribeBlock (/Users/xiaoyang/Downloads/臭味/node_modules/jest-circus/build/run.js:121:9)
    at _runTestsForDescribeBlock (/Users/xiaoyang/Downloads/臭味/node_modules/jest-circus/build/run.js:121:9)
    at run (/Users/xiaoyang/Downloads/臭味/node_modules/jest-circus/build/run.js:71:3)
    at runAndTransformResultsToJestFormat (/Users/xiaoyang/Downloads/臭味/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)
    at jestAdapter (/Users/xiaoyang/Downloads/臭味/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)
    at runTestInternal (/Users/xiaoyang/Downloads/臭味/node_modules/jest-runner/build/runTest.js:367:16)
    at runTest (/Users/xiaoyang/Downloads/臭味/node_modules/jest-runner/build/runTest.js:444:34)</failure>
    </testcase>
    <testcase classname="AntiFraudService edge cases and performance should handle concurrent fraud detection" name="AntiFraudService edge cases and performance should handle concurrent fraud detection" time="0.006">
    </testcase>
    <testcase classname="AntiFraudService edge cases and performance should complete fraud detection within reasonable time" name="AntiFraudService edge cases and performance should complete fraud detection within reasonable time" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="RewardCalculationService" errors="0" failures="0" skipped="0" timestamp="2025-09-03T01:21:32" time="0.047" tests="13">
    <testcase classname="RewardCalculationService calculateReward should calculate reward successfully for eligible user" name="RewardCalculationService calculateReward should calculate reward successfully for eligible user" time="0.001">
    </testcase>
    <testcase classname="RewardCalculationService calculateReward should reject reward for insufficient GPS accuracy" name="RewardCalculationService calculateReward should reject reward for insufficient GPS accuracy" time="0">
    </testcase>
    <testcase classname="RewardCalculationService calculateReward should reject reward for insufficient stay duration" name="RewardCalculationService calculateReward should reject reward for insufficient stay duration" time="0.001">
    </testcase>
    <testcase classname="RewardCalculationService calculateReward should reject reward if user already received reward for annotation" name="RewardCalculationService calculateReward should reject reward if user already received reward for annotation" time="0.001">
    </testcase>
    <testcase classname="RewardCalculationService calculateReward should handle annotation not found" name="RewardCalculationService calculateReward should handle annotation not found" time="0">
    </testcase>
    <testcase classname="RewardCalculationService calculateReward should apply correct time decay factor" name="RewardCalculationService calculateReward should apply correct time decay factor" time="0.001">
    </testcase>
    <testcase classname="RewardCalculationService calculateReward should calculate combo bonus correctly" name="RewardCalculationService calculateReward should calculate combo bonus correctly" time="0">
    </testcase>
    <testcase classname="RewardCalculationService calculateReward should handle database errors gracefully" name="RewardCalculationService calculateReward should handle database errors gracefully" time="0.015">
    </testcase>
    <testcase classname="RewardCalculationService calculateReward should ensure minimum reward amount" name="RewardCalculationService calculateReward should ensure minimum reward amount" time="0.001">
    </testcase>
    <testcase classname="RewardCalculationService calculateRewardWithDB should call database function correctly" name="RewardCalculationService calculateRewardWithDB should call database function correctly" time="0.001">
    </testcase>
    <testcase classname="RewardCalculationService calculateRewardWithDB should handle database errors" name="RewardCalculationService calculateRewardWithDB should handle database errors" time="0.001">
    </testcase>
    <testcase classname="RewardCalculationService calculateRewardWithDB should handle null/undefined results" name="RewardCalculationService calculateRewardWithDB should handle null/undefined results" time="0.001">
    </testcase>
    <testcase classname="RewardCalculationService private method testing through reflection should handle time decay correctly for different time periods" name="RewardCalculationService private method testing through reflection should handle time decay correctly for different time periods" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="User Model" errors="0" failures="26" skipped="0" timestamp="2025-09-03T01:21:32" time="0.296" tests="26">
    <testcase classname="User Model User Creation should create a new user with valid data" name="User Model User Creation should create a new user with valid data" time="0.006">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Creation should hash password during user creation" name="User Model User Creation should hash password during user creation" time="0.004">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Creation should reject user creation with invalid email" name="User Model User Creation should reject user creation with invalid email" time="0.004">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Creation should reject user creation with duplicate username" name="User Model User Creation should reject user creation with duplicate username" time="0.008">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Creation should reject user creation with duplicate email" name="User Model User Creation should reject user creation with duplicate email" time="0.004">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Authentication should authenticate user with correct credentials" name="User Model User Authentication should authenticate user with correct credentials" time="0.004">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Authentication should fail authentication with incorrect password" name="User Model User Authentication should fail authentication with incorrect password" time="0.005">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Authentication should fail authentication with non-existent email" name="User Model User Authentication should fail authentication with non-existent email" time="0.004">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Authentication should fail authentication with inactive user" name="User Model User Authentication should fail authentication with inactive user" time="0.003">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Profile Management should update user profile successfully" name="User Model User Profile Management should update user profile successfully" time="0.005">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Profile Management should update password correctly" name="User Model User Profile Management should update password correctly" time="0.004">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Profile Management should verify email successfully" name="User Model User Profile Management should verify email successfully" time="0.002">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Statistics should get user statistics" name="User Model User Statistics should get user statistics" time="0.002">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Search and Retrieval should find user by ID" name="User Model User Search and Retrieval should find user by ID" time="0.003">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Search and Retrieval should find user by email" name="User Model User Search and Retrieval should find user by email" time="0.003">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Search and Retrieval should find user by username" name="User Model User Search and Retrieval should find user by username" time="0.002">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Search and Retrieval should find all active users" name="User Model User Search and Retrieval should find all active users" time="0.003">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Search and Retrieval should paginate user results" name="User Model User Search and Retrieval should paginate user results" time="0.003">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Deletion should soft delete user" name="User Model User Deletion should soft delete user" time="0.004">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model User Deletion should not find soft deleted user in normal queries" name="User Model User Deletion should not find soft deleted user in normal queries" time="0.003">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model Edge Cases and Error Handling should handle empty search queries gracefully" name="User Model Edge Cases and Error Handling should handle empty search queries gracefully" time="0.002">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model Edge Cases and Error Handling should handle invalid user ID gracefully" name="User Model Edge Cases and Error Handling should handle invalid user ID gracefully" time="0.003">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model Edge Cases and Error Handling should handle non-existent user updates gracefully" name="User Model Edge Cases and Error Handling should handle non-existent user updates gracefully" time="0.003">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model Edge Cases and Error Handling should validate email format" name="User Model Edge Cases and Error Handling should validate email format" time="0.003">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model Edge Cases and Error Handling should enforce username length constraints" name="User Model Edge Cases and Error Handling should enforce username length constraints" time="0.003">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
    <testcase classname="User Model Edge Cases and Error Handling should enforce password strength requirements" name="User Model Edge Cases and Error Handling should enforce password strength requirements" time="0.003">
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
      <failure>AggregateError: 
    at internalConnectMultiple (node:net:1122:18)
    at afterConnectMultiple (node:net:1689:7)</failure>
    </testcase>
  </testsuite>
  <testsuite name="AntiFraudService" errors="0" failures="0" skipped="0" timestamp="2025-09-03T01:21:32" time="0.067" tests="20">
    <testcase classname="AntiFraudService validateGPSAccuracy should accept high accuracy GPS readings" name="AntiFraudService validateGPSAccuracy should accept high accuracy GPS readings" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService validateGPSAccuracy should reject low accuracy GPS readings" name="AntiFraudService validateGPSAccuracy should reject low accuracy GPS readings" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService validateGPSAccuracy should reject stale GPS readings" name="AntiFraudService validateGPSAccuracy should reject stale GPS readings" time="0">
    </testcase>
    <testcase classname="AntiFraudService validateGPSAccuracy should reject invalid coordinates" name="AntiFraudService validateGPSAccuracy should reject invalid coordinates" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService analyzeMovementPattern should detect normal walking pattern" name="AntiFraudService analyzeMovementPattern should detect normal walking pattern" time="0">
    </testcase>
    <testcase classname="AntiFraudService analyzeMovementPattern should detect teleportation (impossible speed)" name="AntiFraudService analyzeMovementPattern should detect teleportation (impossible speed)" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService analyzeMovementPattern should detect stationary spoofing" name="AntiFraudService analyzeMovementPattern should detect stationary spoofing" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService detectDeviceFingerprinting should create unique device fingerprint" name="AntiFraudService detectDeviceFingerprinting should create unique device fingerprint" time="0">
    </testcase>
    <testcase classname="AntiFraudService detectDeviceFingerprinting should detect multiple accounts from same device" name="AntiFraudService detectDeviceFingerprinting should detect multiple accounts from same device" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService analyzeRewardClaimingPattern should detect normal claiming pattern" name="AntiFraudService analyzeRewardClaimingPattern should detect normal claiming pattern" time="0">
    </testcase>
    <testcase classname="AntiFraudService analyzeRewardClaimingPattern should detect rapid successive claims (bot behavior)" name="AntiFraudService analyzeRewardClaimingPattern should detect rapid successive claims (bot behavior)" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService analyzeRewardClaimingPattern should detect unusual reward amounts" name="AntiFraudService analyzeRewardClaimingPattern should detect unusual reward amounts" time="0">
    </testcase>
    <testcase classname="AntiFraudService checkGeofenceManipulation should detect normal geofence interaction" name="AntiFraudService checkGeofenceManipulation should detect normal geofence interaction" time="0">
    </testcase>
    <testcase classname="AntiFraudService checkGeofenceManipulation should detect location outside geofence" name="AntiFraudService checkGeofenceManipulation should detect location outside geofence" time="0">
    </testcase>
    <testcase classname="AntiFraudService calculateRiskScore should calculate low risk score for normal user" name="AntiFraudService calculateRiskScore should calculate low risk score for normal user" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService calculateRiskScore should calculate high risk score for suspicious user" name="AntiFraudService calculateRiskScore should calculate high risk score for suspicious user" time="0.003">
    </testcase>
    <testcase classname="AntiFraudService recordSuspiciousActivity should record suspicious activity" name="AntiFraudService recordSuspiciousActivity should record suspicious activity" time="0.001">
    </testcase>
    <testcase classname="AntiFraudService shouldBlockUser should not block user with low risk score" name="AntiFraudService shouldBlockUser should not block user with low risk score" time="0.012">
    </testcase>
    <testcase classname="AntiFraudService shouldBlockUser should block user with high risk score" name="AntiFraudService shouldBlockUser should block user with high risk score" time="0">
    </testcase>
    <testcase classname="AntiFraudService shouldBlockUser should block user with multiple violations" name="AntiFraudService shouldBlockUser should block user with multiple violations" time="0">
    </testcase>
  </testsuite>
</testsuites>