name: Mobile & Cross-Device Compatibility Testing

on:
  push:
    branches: [main, develop, feature/compatibility-testing]
  pull_request:
    branches: [main, develop]
  schedule:
    # 每天运行一次完整的兼容性测试
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - mobile-only
          - desktop-only
          - performance
          - cross-browser
      network_conditions:
        description: 'Network conditions to test'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - wifi-only
          - mobile-networks
          - slow-networks

env:
  NODE_VERSION: '18'
  PLAYWRIGHT_BROWSERS_PATH: 0

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate test matrix
        id: generate-matrix
        run: |
          # 根据输入参数生成测试矩阵
          if [ "${{ github.event.inputs.test_scope }}" = "mobile-only" ]; then
            matrix='{"include":[
              {"os":"ubuntu-latest","browser":"chromium","device":"mobile","suite":"mobile-responsive"},
              {"os":"ubuntu-latest","browser":"webkit","device":"mobile","suite":"touch-gestures"},
              {"os":"ubuntu-latest","browser":"chromium","device":"mobile","suite":"device-features"}
            ]}'
          elif [ "${{ github.event.inputs.test_scope }}" = "desktop-only" ]; then
            matrix='{"include":[
              {"os":"ubuntu-latest","browser":"chromium","device":"desktop","suite":"cross-browser"},
              {"os":"ubuntu-latest","browser":"firefox","device":"desktop","suite":"cross-browser"},
              {"os":"ubuntu-latest","browser":"webkit","device":"desktop","suite":"cross-browser"}
            ]}'
          elif [ "${{ github.event.inputs.test_scope }}" = "performance" ]; then
            matrix='{"include":[
              {"os":"ubuntu-latest","browser":"chromium","device":"mobile","suite":"performance-mobile"},
              {"os":"ubuntu-latest","browser":"chromium","device":"desktop","suite":"network-performance"}
            ]}'
          else
            # 完整测试矩阵
            matrix='{"include":[
              {"os":"ubuntu-latest","browser":"chromium","device":"mobile","suite":"mobile-responsive"},
              {"os":"ubuntu-latest","browser":"chromium","device":"mobile","suite":"touch-gestures"},
              {"os":"ubuntu-latest","browser":"chromium","device":"mobile","suite":"device-features"},
              {"os":"ubuntu-latest","browser":"chromium","device":"mobile","suite":"performance-mobile"},
              {"os":"ubuntu-latest","browser":"chromium","device":"desktop","suite":"cross-browser"},
              {"os":"ubuntu-latest","browser":"firefox","device":"desktop","suite":"cross-browser"},
              {"os":"ubuntu-latest","browser":"webkit","device":"desktop","suite":"cross-browser"},
              {"os":"ubuntu-latest","browser":"chromium","device":"desktop","suite":"network-performance"},
              {"os":"macos-latest","browser":"webkit","device":"desktop","suite":"cross-browser"},
              {"os":"windows-latest","browser":"chromium","device":"desktop","suite":"cross-browser"}
            ]}'
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  compatibility-tests:
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci

      - name: Install Playwright browsers
        run: |
          npx playwright install ${{ matrix.browser }}
          npx playwright install-deps ${{ matrix.browser }}

      - name: Start backend server
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      - name: Start frontend server
        run: |
          cd frontend
          npm run build
          npm run start &
          npx wait-on http://localhost:3001 --timeout 60000
        env:
          NODE_ENV: test
          NEXT_PUBLIC_API_URL: http://localhost:3000

      - name: Run compatibility tests
        run: |
          case "${{ matrix.suite }}" in
            "mobile-responsive")
              npx playwright test --config=tests/compatibility/playwright.mobile.config.ts --project="${{ matrix.browser }}-mobile" tests/compatibility/mobile-responsive.test.ts
              ;;
            "touch-gestures")
              npx playwright test --config=tests/compatibility/playwright.mobile.config.ts --project="${{ matrix.browser }}-mobile" tests/compatibility/touch-gestures.test.ts
              ;;
            "device-features")
              npx playwright test --config=tests/compatibility/playwright.mobile.config.ts --project="${{ matrix.browser }}-mobile" tests/compatibility/device-features.test.ts
              ;;
            "performance-mobile")
              npx playwright test --config=tests/compatibility/playwright.mobile.config.ts --project="${{ matrix.browser }}-mobile" tests/compatibility/performance-mobile.test.ts
              ;;
            "cross-browser")
              npx playwright test --config=tests/compatibility/playwright.mobile.config.ts --project="Desktop-${{ matrix.browser }}" tests/compatibility/cross-browser.test.ts
              ;;
            "network-performance")
              npx playwright test --config=tests/compatibility/playwright.mobile.config.ts tests/compatibility/network-performance.test.ts
              ;;
            *)
              npx playwright test --config=tests/compatibility/playwright.mobile.config.ts
              ;;
          esac
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          FRONTEND_URL: http://localhost:3001

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-results-${{ matrix.os }}-${{ matrix.browser }}-${{ matrix.device }}-${{ matrix.suite }}
          path: |
            test-results/
            compatibility-report/
            compatibility-results.json
            compatibility-results.xml
          retention-days: 30

      - name: Upload screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-screenshots-${{ matrix.os }}-${{ matrix.browser }}-${{ matrix.device }}-${{ matrix.suite }}
          path: test-results/
          retention-days: 7

  browserstack-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_scope == 'all')
    env:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g browserstack-local

      - name: Start BrowserStack Local
        run: |
          echo "Starting BrowserStack Local..."
          browserstack-local --key $BROWSERSTACK_ACCESS_KEY --local-identifier compatibility-test-${{ github.run_id }} &
          sleep 10

      - name: Deploy to staging
        run: |
          # 部署到临时环境供BrowserStack访问
          echo "Deploying to staging environment..."
          # 这里应该包含部署脚本
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}

      - name: Run BrowserStack tests
        run: |
          # 运行真实设备测试
          cat > browserstack.json << EOF
          {
            "framework": "playwright",
            "specs": ["tests/compatibility/real-device.test.ts"],
            "browserstackLocal": true,
            "localIdentifier": "compatibility-test-${{ github.run_id }}",
            "parallels": 5,
            "capabilities": [
              {
                "browser": "chrome",
                "browser_version": "latest",
                "os": "android",
                "os_version": "13.0",
                "device": "Samsung Galaxy S23",
                "real_mobile": true
              },
              {
                "browser": "safari",
                "browser_version": "latest",
                "os": "ios",
                "os_version": "17",
                "device": "iPhone 14 Pro",
                "real_mobile": true
              },
              {
                "browser": "chrome",
                "browser_version": "latest",
                "os": "android",
                "os_version": "12.0",
                "device": "Google Pixel 7",
                "real_mobile": true
              }
            ]
          }
          EOF
          
          npx playwright test --config=browserstack.config.ts
        env:
          BROWSERSTACK_BUILD_NAME: "SmellPin Compatibility Tests - ${{ github.run_id }}"
          TEST_URL: ${{ secrets.STAGING_URL }}

  lighthouse-performance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci
          npm install -g @lhci/cli

      - name: Build and start servers
        run: |
          npm run build
          npm run start &
          cd frontend && npm run build && npm run start &
          npx wait-on http://localhost:3000 http://localhost:3001 --timeout 120000

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: .lighthouseci/
          retention-days: 30

  generate-compatibility-report:
    needs: [compatibility-tests, lighthouse-performance]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Install dependencies
        run: npm install

      - name: Generate comprehensive compatibility report
        run: |
          node tests/compatibility/generate-compatibility-report.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TEST_RESULTS_PATH: test-results/

      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-compatibility-report
          path: |
            compatibility-report.html
            compatibility-report.json
            compatibility-summary.md
          retention-days: 90

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './compatibility-summary.md';
            
            if (fs.existsSync(path)) {
              const summary = fs.readFileSync(path, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔧 移动端兼容性测试报告\n\n${summary}`
              });
            }

      - name: Update compatibility status
        if: github.ref == 'refs/heads/main'
        run: |
          # 更新兼容性状态到监控系统
          curl -X POST "${{ secrets.MONITORING_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "type": "compatibility_test",
              "status": "${{ job.status }}",
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "results": {
                "tests_run": "${{ needs.compatibility-tests.outputs.tests_run }}",
                "tests_passed": "${{ needs.compatibility-tests.outputs.tests_passed }}",
                "coverage": "${{ needs.compatibility-tests.outputs.coverage }}"
              }
            }'

  notify-team:
    needs: [generate-compatibility-report]
    runs-on: ubuntu-latest
    if: failure() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify team of compatibility issues
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#development'
          text: |
            🚨 移动端兼容性测试失败
            
            仓库: ${{ github.repository }}
            分支: ${{ github.ref_name }}
            提交: ${{ github.sha }}
            
            请查看测试报告并及时修复兼容性问题。
            
            查看详情: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  update-compatibility-matrix:
    needs: [generate-compatibility-report]
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update compatibility matrix
        run: |
          # 更新项目中的兼容性矩阵文档
          node scripts/update-compatibility-matrix.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit compatibility updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add docs/compatibility-matrix.md
            git commit -m "Update compatibility matrix [skip ci]"
            git push
          fi