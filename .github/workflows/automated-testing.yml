name: 🧪 SmellPin 自动化测试 CI/CD

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *' # 每日凌晨2点运行完整测试
  workflow_dispatch:
    inputs:
      test_type:
        description: '测试类型'
        required: true
        default: 'full'
        type: choice
        options:
          - smoke
          - unit
          - integration
          - load
          - multi-agent
          - full
      test_environment:
        description: '测试环境'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'
  
jobs:
  # 预备工作：环境检查和依赖缓存
  prepare:
    name: '环境准备'
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-deps.outputs.cache-hit }}
      test-type: ${{ steps.determine-tests.outputs.test-type }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 缓存依赖
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
            ~/.cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 安装依赖
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          npm ci
          npm install -g artillery@latest

      - name: 确定测试类型
        id: determine-tests
        run: |
          if [[ "${{ github.event.inputs.test_type }}" != "" ]]; then
            echo "test-type=${{ github.event.inputs.test_type }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "test-type=full" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "test-type=integration" >> $GITHUB_OUTPUT
          else
            echo "test-type=unit" >> $GITHUB_OUTPUT
          fi

      - name: 验证代码质量
        run: |
          npm run lint
          npm run type-check
          npm run format:check

  # 冒烟测试：快速验证基本功能
  smoke-test:
    name: '冒烟测试'
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.test-type == 'smoke' || needs.prepare.outputs.test-type == 'full'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 恢复依赖缓存
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}

      - name: 启动测试服务
        run: |
          chmod +x scripts/test-setup.sh
          ./scripts/test-setup.sh
        timeout-minutes: 5

      - name: 等待服务就绪
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

      - name: 运行冒烟测试
        run: |
          npm install -g artillery@latest
          npm run artillery:smoke
        timeout-minutes: 5

      - name: 清理测试环境
        if: always()
        run: |
          chmod +x scripts/test-teardown.sh
          ./scripts/test-teardown.sh

  # 单元测试
  unit-tests:
    name: '单元测试'
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.test-type == 'unit' || needs.prepare.outputs.test-type == 'integration' || needs.prepare.outputs.test-type == 'full'
    
    strategy:
      matrix:
        test-suite: [user-models, annotation-models, services, middleware, utils]
        
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 恢复依赖缓存
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}

      - name: 启动测试数据库
        run: |
          docker-compose -f docker-compose.test.yml up -d postgres-test redis-test
          sleep 10

      - name: 运行单元测试
        run: |
          npm run test:unit
        env:
          NODE_ENV: test
          TEST_SUITE: ${{ matrix.test-suite }}

      - name: 上传测试覆盖率
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests,${{ matrix.test-suite }}
          name: unit-coverage-${{ matrix.test-suite }}

      - name: 清理
        if: always()
        run: |
          docker-compose -f docker-compose.test.yml down -v

  # 集成测试
  integration-tests:
    name: '集成测试'
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.test-type == 'integration' || needs.prepare.outputs.test-type == 'full'
    
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_DB: smellpin_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5433:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 恢复依赖缓存
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}

      - name: 运行数据库迁移
        run: |
          npm run migrate:test
        env:
          TEST_DATABASE_URL: postgres://test:test@localhost:5433/smellpin_test

      - name: 运行集成测试
        run: |
          npm run test:integration
        env:
          NODE_ENV: test
          TEST_DATABASE_URL: postgres://test:test@localhost:5433/smellpin_test
          REDIS_URL: redis://localhost:6380

      - name: 上传集成测试报告
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-report
          path: test-results/

  # 并行测试
  parallel-tests:
    name: '并行测试'
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.test-type == 'integration' || needs.prepare.outputs.test-type == 'full'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 启动完整测试环境
        run: |
          chmod +x scripts/test-setup.sh
          ./scripts/test-setup.sh

      - name: 运行并行测试套件
        run: |
          npm run test:parallel
        env:
          NODE_ENV: test
          JEST_WORKERS: 4

      - name: 上传并行测试报告
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: parallel-test-report
          path: coverage/parallel/

      - name: 清理测试环境
        if: always()
        run: |
          ./scripts/test-teardown.sh

  # Artillery负载测试
  load-tests:
    name: 'Artillery负载测试'
    runs-on: ubuntu-latest
    needs: [prepare, smoke-test]
    if: needs.prepare.outputs.test-type == 'load' || needs.prepare.outputs.test-type == 'full'
    
    strategy:
      matrix:
        test-type: [base-load, stress-test]
        
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装Artillery
        run: |
          npm install -g artillery@latest

      - name: 启动测试服务器
        run: |
          chmod +x scripts/test-setup.sh
          ./scripts/test-setup.sh
          
          # 启动应用服务器
          npm run build
          NODE_ENV=test npm start &
          sleep 15

      - name: 验证服务器状态
        run: |
          curl -f http://localhost:3001/health
          curl -f http://localhost:3001/api/v1/health

      - name: 运行Artillery负载测试
        run: |
          if [[ "${{ matrix.test-type }}" == "base-load" ]]; then
            npm run artillery:load
          elif [[ "${{ matrix.test-type }}" == "stress-test" ]]; then
            npm run artillery:stress
          fi
        timeout-minutes: 20

      - name: 生成测试报告
        if: always()
        run: |
          if [[ -f "report.json" ]]; then
            artillery report report.json --output artillery-report-${{ matrix.test-type }}.html
          fi

      - name: 上传Artillery报告
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: artillery-report-${{ matrix.test-type }}
          path: |
            artillery-report-*.html
            report.json

      - name: 清理
        if: always()
        run: |
          ./scripts/test-teardown.sh

  # 多Agent模拟测试
  multi-agent-tests:
    name: '多Agent模拟测试'
    runs-on: ubuntu-latest
    needs: [prepare, unit-tests]
    if: needs.prepare.outputs.test-type == 'multi-agent' || needs.prepare.outputs.test-type == 'full'
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 安装依赖
        run: |
          npm ci
          npm install -g artillery@latest
          npm install @faker-js/faker

      - name: 启动完整测试环境
        run: |
          chmod +x scripts/test-setup.sh
          ./scripts/test-setup.sh
          
          # 启动应用服务器
          npm run build
          NODE_ENV=test npm start &
          sleep 20

      - name: 预创建测试用户
        run: |
          # 创建测试用户用于多Agent测试
          node -e "
            const axios = require('axios');
            const users = [
              {username: 'active1', email: 'active1@smellpin.test', password: 'Active123!'},
              {username: 'active2', email: 'active2@smellpin.test', password: 'Active123!'},
              {username: 'social1', email: 'social1@smellpin.test', password: 'Social123!'},
              {username: 'mobile1', email: 'mobile1@smellpin.test', password: 'Mobile123!'}
            ];
            
            Promise.all(users.map(user => 
              axios.post('http://localhost:3001/api/v1/users/register', user)
                .catch(err => console.log('User may already exist:', user.username))
            )).then(() => console.log('Test users created'));
          "

      - name: 运行多Agent测试
        run: |
          npm run artillery:multi-agent
        timeout-minutes: 25
        env:
          MULTI_AGENT_MODE: true
          AGENT_SIMULATION: true

      - name: 收集性能指标
        if: always()
        run: |
          # 收集系统性能指标
          echo "=== 系统资源使用情况 ===" > performance-metrics.txt
          echo "CPU使用率:" >> performance-metrics.txt
          top -bn1 | grep "Cpu(s)" >> performance-metrics.txt
          echo "内存使用率:" >> performance-metrics.txt
          free -h >> performance-metrics.txt
          echo "磁盘IO:" >> performance-metrics.txt
          iostat -x 1 1 >> performance-metrics.txt 2>/dev/null || echo "iostat not available"

      - name: 上传多Agent测试报告
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: multi-agent-test-report
          path: |
            report.json
            performance-metrics.txt
            artillery-report-*.html

      - name: 清理
        if: always()
        run: |
          ./scripts/test-teardown.sh

  # 测试报告聚合
  test-summary:
    name: '测试结果汇总'
    runs-on: ubuntu-latest
    needs: [smoke-test, unit-tests, integration-tests, parallel-tests, load-tests, multi-agent-tests]
    if: always()
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载所有测试报告
        uses: actions/download-artifact@v3
        with:
          path: test-reports/

      - name: 生成测试汇总报告
        run: |
          echo "# SmellPin 自动化测试报告" > TEST_SUMMARY.md
          echo "" >> TEST_SUMMARY.md
          echo "## 测试执行时间: $(date)" >> TEST_SUMMARY.md
          echo "" >> TEST_SUMMARY.md
          echo "## 测试结果概览" >> TEST_SUMMARY.md
          echo "" >> TEST_SUMMARY.md
          
          # 检查各个测试阶段的状态
          echo "| 测试阶段 | 状态 | 详情 |" >> TEST_SUMMARY.md
          echo "|---------|------|------|" >> TEST_SUMMARY.md
          echo "| 冒烟测试 | ${{ needs.smoke-test.result }} | 快速功能验证 |" >> TEST_SUMMARY.md
          echo "| 单元测试 | ${{ needs.unit-tests.result }} | 代码单元验证 |" >> TEST_SUMMARY.md
          echo "| 集成测试 | ${{ needs.integration-tests.result }} | API接口测试 |" >> TEST_SUMMARY.md
          echo "| 并行测试 | ${{ needs.parallel-tests.result }} | 并发性能测试 |" >> TEST_SUMMARY.md
          echo "| 负载测试 | ${{ needs.load-tests.result }} | Artillery压力测试 |" >> TEST_SUMMARY.md
          echo "| 多Agent测试 | ${{ needs.multi-agent-tests.result }} | 用户行为模拟 |" >> TEST_SUMMARY.md
          echo "" >> TEST_SUMMARY.md
          
          # 统计测试文件
          echo "## 测试报告文件" >> TEST_SUMMARY.md
          find test-reports/ -name "*.html" -o -name "*.json" -o -name "*.xml" | while read file; do
            echo "- [$file]($file)" >> TEST_SUMMARY.md
          done

      - name: 上传测试汇总
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: |
            TEST_SUMMARY.md
            test-reports/

      - name: 评论PR（如果是PR）
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('TEST_SUMMARY.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🧪 自动化测试报告\n\n${summary}`
            });

  # 失败通知
  notify-failure:
    name: '失败通知'
    runs-on: ubuntu-latest
    needs: [smoke-test, unit-tests, integration-tests, parallel-tests, load-tests, multi-agent-tests]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: 发送钉钉通知
        if: failure()
        run: |
          curl -X POST https://oapi.dingtalk.com/robot/send?access_token=${{ secrets.DINGTALK_TOKEN }} \
            -H 'Content-Type: application/json' \
            -d "{
              \"msgtype\": \"markdown\",
              \"markdown\": {
                \"title\": \"SmellPin 测试失败通知\",
                \"text\": \"## 🚨 SmellPin 自动化测试失败\\n\\n**分支**: ${{ github.ref_name }}\\n**提交**: ${{ github.sha }}\\n**触发者**: ${{ github.actor }}\\n\\n请检查测试日志并修复问题。\"
              }
            }"