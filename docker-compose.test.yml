# Docker Compose测试环境 - SmellPin自动化测试方案2.0
version: '3.8'

services:
  # PostgreSQL测试数据库
  postgres-test:
    image: postgis/postgis:16-3.4
    container_name: smellpin_postgres_test
    environment:
      POSTGRES_DB: smellpin_test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./tests/sql:/docker-entrypoint-initdb.d
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test -d smellpin_test"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - test-network

  # Redis测试缓存
  redis-test:
    image: redis:7-alpine
    container_name: smellpin_redis_test
    ports:
      - "6380:6379"
    command: >
      redis-server
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_test_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - test-network

  # MinIO对象存储测试服务
  minio-test:
    image: minio/minio:latest
    container_name: smellpin_minio_test
    environment:
      MINIO_ROOT_USER: test
      MINIO_ROOT_PASSWORD: testpassword
    ports:
      - "9001:9000"
      - "9002:9001"
    volumes:
      - minio_test_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - test-network

  # Elasticsearch测试服务（用于搜索测试）
  elasticsearch-test:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: smellpin_elasticsearch_test
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9201:9200"
    volumes:
      - elasticsearch_test_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - test-network
    deploy:
      resources:
        limits:
          memory: 1GB

  # MailHog SMTP测试服务（邮件测试）
  mailhog-test:
    image: mailhog/mailhog:v1.0.1
    container_name: smellpin_mailhog_test
    ports:
      - "1026:1025" # SMTP
      - "8026:8025" # Web UI
    restart: unless-stopped
    networks:
      - test-network

  # 测试数据库初始化容器
  db-init:
    image: postgis/postgis:16-3.4
    container_name: smellpin_db_init
    environment:
      PGHOST: postgres-test
      PGPORT: 5432
      PGUSER: test
      PGPASSWORD: test
      PGDATABASE: smellpin_test
    volumes:
      - ./migrations:/migrations
      - ./tests/sql:/init-scripts
    working_dir: /migrations
    command: >
      bash -c "
        echo 'Waiting for PostgreSQL...'
        while ! pg_isready -h postgres-test -U test; do
          sleep 1
        done
        echo 'PostgreSQL is ready!'
        
        echo 'Creating test databases...'
        psql -h postgres-test -U test -c 'CREATE DATABASE IF NOT EXISTS smellpin_test_parallel;'
        psql -h postgres-test -U test -c 'CREATE DATABASE IF NOT EXISTS smellpin_test_integration;'
        psql -h postgres-test -U test -c 'CREATE DATABASE IF NOT EXISTS smellpin_test_e2e;'
        
        echo 'Enabling PostGIS extensions...'
        psql -h postgres-test -U test -d smellpin_test -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
        psql -h postgres-test -U test -d smellpin_test_parallel -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
        psql -h postgres-test -U test -d smellpin_test_integration -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
        psql -h postgres-test -U test -d smellpin_test_e2e -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
        
        echo 'Test database initialization completed!'
      "
    depends_on:
      postgres-test:
        condition: service_healthy
    networks:
      - test-network

  # 测试监控服务（Prometheus + Grafana）
  prometheus-test:
    image: prom/prometheus:v2.40.0
    container_name: smellpin_prometheus_test
    ports:
      - "9091:9090"
    volumes:
      - ./tests/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_test_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=1d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - test-network

volumes:
  postgres_test_data:
    driver: local
  redis_test_data:
    driver: local
  minio_test_data:
    driver: local
  elasticsearch_test_data:
    driver: local
  prometheus_test_data:
    driver: local

networks:
  test-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 测试环境配置说明
x-test-config: &test-config
  description: "SmellPin测试环境配置"
  services:
    postgres-test: "PostgreSQL + PostGIS测试数据库"
    redis-test: "Redis缓存测试服务"
    minio-test: "对象存储测试服务"
    elasticsearch-test: "搜索引擎测试服务"
    mailhog-test: "SMTP邮件测试服务"
    db-init: "数据库初始化服务"
    prometheus-test: "性能监控测试服务"
  usage:
    start: "docker-compose -f docker-compose.test.yml up -d"
    stop: "docker-compose -f docker-compose.test.yml down"
    clean: "docker-compose -f docker-compose.test.yml down -v"
    logs: "docker-compose -f docker-compose.test.yml logs -f [service]"